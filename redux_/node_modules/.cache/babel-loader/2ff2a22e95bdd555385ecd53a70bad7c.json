{"ast":null,"code":"var _jsxFileName = \"/Users/maikegeleidi/Desktop/Other/React/redux/src/main.js\";\nimport React from \"react\";\nimport Item from './item';\nimport { connect } from \"react-redux\";\n\nclass Mian extends React.Component {\n  render() {\n    let data = this.props.data;\n    console.log('this.props.isCheckAll' + this.props.isCheckAll);\n    return React.createElement(\"table\", {\n      className: \"main\",\n      style: {\n        display: data.length ? \"table\" : \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      id: \"checkAll\",\n      checked: this.props.isCheckAll,\n      onChange: e => {\n        this.props.dispatch({\n          type: \"CHECK_ALL\",\n          checked: e.target.checked\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"checkAll\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"\\u5168\\u9009\")), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, \"\\u6B4C\\u66F2\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"\\u6B4C\\u624B\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"\\u6536\\u85CF\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"\\u5220\\u9664\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, data.map(val => {\n      return React.createElement(Item, {\n        key: val.id,\n        id: val.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n/*\n* 根据pathName 判断当前应该显示什么列表\n* isCheckAll 判断是否是全选状态\n*\n */\n\n\nexport default connect((state, props) => {\n  console.log(state.data.length);\n\n  let isCheckAll = (() => {\n    // 判断数组中是否又被选中的对象\n    for (let i = 0; i < state.data.length; i++) {\n      if (state.data[i].selected) {\n        return true;\n      }\n\n      return false;\n    }\n  })();\n\n  let pathName = props.location.pathname;\n\n  if (pathName === '/') {\n    // 判断当前页面是在那个路由中加载的。\n    return Object.assign({}, state, {\n      isCheckAll\n    }); // isCheckAll 是在处理数据中新增加的属性，页面中只需拿去使用即可无需再处理逻辑了\n  }\n\n  if (pathName === '/like') {\n    console.log(isCheckAll);\n    let data = {}; // 根据加载的路由，获取当前数组中，被收藏的数据对象，然后再加载当前的页面\n\n    data.data = state.data.filter(item => item.like);\n    return Object.assign({}, data, {\n      isCheckAll\n    });\n  }\n})(Mian);","map":{"version":3,"sources":["/Users/maikegeleidi/Desktop/Other/React/redux/src/main.js"],"names":["React","Item","connect","Mian","Component","render","data","props","console","log","isCheckAll","display","length","e","dispatch","type","checked","target","map","val","id","state","i","selected","pathName","location","pathname","Object","assign","filter","item","like"],"mappings":"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","sourcesContent":["import  React from \"react\";\nimport Item from './item'\nimport {connect} from  \"react-redux\"\n class Mian extends React.Component{\n    render(){\n        let data = this.props.data;\n        console.log('this.props.isCheckAll' + this.props.isCheckAll);\n        return(\n            <table className=\"main\"\n                   style={{\n                       display: data.length ? \"table\" : \"none\"\n                   }}\n            >\n                <thead>\n                <tr>\n                    <th>\n                        <input\n                            type=\"checkbox\"\n                            id=\"checkAll\"\n                            checked={this.props.isCheckAll}\n                            onChange={(e)=>{\n                                this.props.dispatch({\n                                    type:\"CHECK_ALL\",\n                                    checked:e.target.checked\n                                })\n                            }}\n                        />\n                        <label htmlFor=\"checkAll\">全选</label>\n                    </th>\n                    <th>歌曲</th>\n                    <th>歌手</th>\n                    <th>收藏</th>\n                    <th>删除</th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    data.map((val)=>{\n                        return (\n                            <Item\n                                key={val.id}\n                                id={val.id}\n                            />\n                        )\n                    })\n                }\n\n                </tbody>\n            </table>\n        );\n    }\n}\n\n/*\n* 根据pathName 判断当前应该显示什么列表\n* isCheckAll 判断是否是全选状态\n*\n */\nexport default connect((state,props)=>{\n    console.log(state.data.length)\n    let isCheckAll = (()=> {// 判断数组中是否又被选中的对象\n        for(let i = 0; i < state.data.length; i++){\n            if(state.data[i].selected){\n                return true;\n            }\n            return false;\n    }\n\n    })();\n\n    let pathName = props.location.pathname;\n    if(pathName === '/'){ // 判断当前页面是在那个路由中加载的。\n\n        return  Object.assign({},state,{isCheckAll});\n        // isCheckAll 是在处理数据中新增加的属性，页面中只需拿去使用即可无需再处理逻辑了\n    }\n    if (pathName === '/like'){\n        console.log(isCheckAll);\n        let data = {}; // 根据加载的路由，获取当前数组中，被收藏的数据对象，然后再加载当前的页面\n        data.data = state.data.filter((item)=>item.like);\n        return  Object.assign({},data,{isCheckAll});\n    }\n})(Mian);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}